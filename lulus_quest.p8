pico-8 cartridge // http://www.pico-8.com
version 42
__lua__
SFX = {
	{0,-1,0,12},
	{0,-1,16,20},
}
function _init()
	init_player()
	init_light()
	init_room()
 init_objects()
	cx = 0
	cy = 0
	frames = 0
	room_transition_pending = false
	i_room = 0
	is_in_switch = false
	lives = 3
	bo_spr = 22
	-- music(7)
	--DEBUG
	debug_light = false
end

function _update()
	frames=((frames+1)%30)
	update_player()
	update_room()
	update_light()
	update_objects()
	cx = room.x
	cy = room.y
end

function _draw()
	cls()
	camera(cx, cy)
	map(0, 0, 0, 0, 128, 128, 0)
	draw_light()
	map(0, 0, 0, 0, 128, 128, 1)
	draw_objects()
	draw_player()
	-- line()
	if btn(üÖæÔ∏è) and lulu.select then
		-- Dessiner la grid de la map
		-- for i=0,1 do
		-- 	for j=0,16 do
		-- 		if (i == 0) line(0, max(0,(j*8)),128,max(0,(j*8)), 8)
		-- 		if (i == 1) line(max(0,(j*8)),0,max(0,(j*8)),128,8)
		-- 	end
		-- end
		-- pset(ima_light.x,ima_light.y,11)
	end
	draw_ui()
	debug_print()
end

-->8
--player

function init_player()
	lulu = {
		x = 1 * 8,
		y = 13 * 8,
		x_g = x,
		y_g = y,
		h = 8,
		w = 8,
		dx = 0,
		dy = 0,
		g = false,
		default_sprite = 1,
		sprite = 1,
		sprite_hide = 3,
		flipx = false,
		select = true,
		in_light = true,
		using_light = false, --to know if player is holding C key
		using_black_light = false,
		ima_range = 6 * 8, --range of ima_light
		lights_left = 1,
		passed = false, --pass lvl
		id = "lulu"
	}
	hades = {
		x = 15 * 8,
		y = 14 * 8,
		x_g = x,
		y_g = y,
		h = 8,
		w = 8,
		dx = 0,
		dy = 0,
		g = false,
		default_sprite = 5,
		sprite = 5,
		sprite_hide = 7,
		flipx = true,
		select = false,
		in_light = false,
		using_light	= false,
		using_black_light = false,
		ima_range = 6 * 8, 
		light_selected = 
		{
			nil, -- id light
			0 -- index dynamique
		},
		turnoffs_left = 1,
		passed = false, --pass lvl
		id = "hades"
	}
	pactual = lulu
end

function draw_player()
	--if they have finished the lvl
	if not (lulu.passed) then
		lulu.sprite = pactual == lulu and lulu.sprite or lulu.sprite_hide
		spr(lulu.sprite, lulu.x, lulu.y, 1, 1, lulu.flipx)
	end
	if not (hades.passed) then
		hades.sprite = pactual == hades and hades.sprite or hades.sprite_hide
		if hades.sprite == hades.sprite_hide then
			palt(0,false)
			palt(12,true)
		end
		spr(hades.sprite, hades.x, hades.y, 1, 1, hades.flipx)
		palt()
	end
end

function update_player()
	--delay when switching
	if is_in_switch then
		is_in_switch = frames == 30 and true or false
		return
	end
	--if they have finished the lvl
	if pactual.passed then
		switch_character()
		return
	end

	if pactual.using_black_light then
		update_black_light()
		return
	end

	if btn(üÖæÔ∏è) then
		if pactual == lulu and ima_light.x != nil then
			if ima_light.x > lulu.x then
				lulu.flipx = false
			else
				lulu.flipx = true
			end
		end
		return
	end

	--switch characters
	if btnp(‚¨áÔ∏è) and not btn(üÖæÔ∏è) then
		switch_character()
		return
	end

	if btn(‚¨ÖÔ∏è) then
		pactual.dx -= 1.33
		pactual.flipx = true
	end
	if btn(‚û°Ô∏è) then
		pactual.dx += 1.33
		pactual.flipx = false
	end
	if btnp(‚¨ÜÔ∏è) then
		if pactual.g then
			pactual.dy = -2.5
			-- sfx(0,-1,0,12)
			sfx(SFX[1][1],SFX[1][2],SFX[1][3],SFX[1][4])
		end
	end
	pactual.y += pactual.dy
	pactual.dx *= 0.6
	if pactual == lulu then
		pactual.dy += 0.20
	else
		pactual.dy += 0.13
	end

	if check_flag(0, pactual.x + 3, pactual.y + 8) or check_flag(0, pactual.x + 5, pactual.y + 8) then
		pactual.g = true
		pactual.dy = 0
		pactual.y = flr(pactual.y / 8) * 8
	else
		pactual.g = false
	end

	if pactual.dx > 0 then
		if not check_flag(0, pactual.x + 9, pactual.y + 7) and not check_flag(0, pactual.x + 9, pactual.y) then
			pactual.x += pactual.dx
		end
	elseif pactual.dx < 0 then
		if not check_flag(0, pactual.x - 1, pactual.y + 7) and not check_flag(0, pactual.x - 1, pactual.y) then
			pactual.x += pactual.dx
		end
	end
	--another security check in case of accel
	if check_flag(0, pactual.x + 7, pactual.y + 7) then
		pactual.x -= 1
	end
	--another security check in case of accel
	if check_flag(0, pactual.x, pactual.y + 7) then
		pactual.x += 1
	end

	if check_flag(0, pactual.x + 1, pactual.y) or check_flag(0, pactual.x + 6, pactual.y) then
		pactual.dy = 0
		pactual.y += 1
	end

	--if fall in water or lava

	if check_flag(1, pactual.x + 4, pactual.y) then
		restart_level()
		sfx(8)
		return
	end

	--collisions lulu and light
	pactual.in_light = false
	for l in all(lights) do
		if collision_light(pactual, l) then
			pactual.in_light = true
			break
		end
	end

	--maybe pactual has collide with a light, but if it is in black light, it cancels the condition
		for bl in all(black_lights) do
			if collision_black_light(pactual, bl) then
				if pactual == lulu then
					pactual.in_light = true
					break
				elseif pactual == hades then
					pactual.in_light = false
					break
				end
			end
		end

	if (not lulu.in_light and not lulu.passed) or (hades.in_light and not hades.passed) or pactual.y >= room.h-1 then
		if lives > 0 then
			-- lives = lives - 1
			if i_room == 0 then 
				restart_game()
				sfx(9)
				return
			end
			restart_level()
			sfx(8)
		else
			restart_game()
			sfx(9)
			end
	end

	pactual.y_g = ceil(pactual.y / 8) * 8
	pactual.x_g = ceil(pactual.x / 8) * 8

	--clamp „Çå„Åç la map
	if not room_transition_pending then
		pactual.x = mid(room.x, pactual.x, room.w - 8)
		pactual.y = mid(room.y, pactual.y, room.h - 8)
	end

	--interactions
	if black_orbs[1] != nil then
		foreach(
			black_orbs, function(bo)
				if collision(pactual, bo) then
					pactual.using_black_light = true
					ima_light_bo.x = pactual.x_g
					ima_light_bo.y = pactual.y_g
					sfx(10)
					del(black_orbs,bo)
				end
			end
		)
	end

	--animations
	--jump
	if not pactual.g then
		pactual.sprite = pactual.default_sprite + 3
	else
		--move
		if pactual.dx > 0.2 or pactual.dx < -0.2 then
			pactual.sprite = frames % 8 >= 4 and pactual.default_sprite + 1 or pactual.default_sprite
			if frames % 8 == 0 then
				-- sfx(3)
				sfx(SFX[2][1],SFX[2][2],SFX[2][3],SFX[2][4])
			end
		else
			pactual.sprite = pactual.default_sprite
		end
	end
end

function switch_character()
	--switch characters
	if (pactual == lulu) then
		pactual = hades
		lulu.select = false
		reinit_character()
		hades.select = true
		is_in_switch = true
	elseif (pactual == hades) then
		pactual = lulu
		lulu.select = true
		reinit_character()
		hades.select = false
		is_in_switch = true
	end
end

function reinit_character()
	pactual.dx = 0
	pactual.dy = 0
	pactual.g = false
end

-->8
--map

function check_flag(flag, x, y)
	local sprite = mget(x / 8, y / 8)
	return fget(sprite, flag)
end

-->8
--lights

function init_light()
	ima_light = {
		x = lulu.x + 4,
		y = lulu.x + 4,
		radius = 16,
		color = 12
	}
	lights = {}
	create_light(-2 * 8, 10 * 8, 26)
	create_light(9 * 8, 12 * 8, 16)
end

function update_light()
	-- lulu
		if btn(üÖæÔ∏è) then
			if lulu.select and lulu.lights_left > 0 then
				update_light_lulu()
			end
				--hades
			if hades.select then
				update_light_hades()
			end
		end
	if not btn(üÖæÔ∏è) then 
		lulu.using_light = false
		hades.using_light = false
		hades.light_selected[1] = nil
		sfx(7,-2)
		sfx(4,-2)
	end
end

function update_light_lulu()
	if not lulu.using_light then
		--setting position of light
		ima_light.y = lulu.y_g
		ima_light.x = lulu.x_g
		lulu.using_light = true
		sfx(4)
	end

	local xsign = 0
	local ysign = 0
	local dirpressed = false
	
	if (btn(‚¨ÖÔ∏è)) xsign = -1
	if (btn(‚û°Ô∏è)) xsign = 1
	if (btn(‚¨ÜÔ∏è)) ysign = -1
	if (btn(‚¨áÔ∏è)) ysign = 1
	if ((btn(‚¨ÖÔ∏è)) or (btn(‚û°Ô∏è)) or (btn(‚¨ÜÔ∏è)) or (btn(‚¨áÔ∏è))) dirpressed = true

	if dirpressed then
			local x = ima_light.x + xsign * 8
			local y = ima_light.y + ysign * 8
			
			-- V„Çå„Åürification du d„Çå„Åüplacement normal
			if frames % 3 == 0 then
				ima_light.x = mid(room.x, flr(x / 8) * 8, room.w)
				ima_light.y = mid(room.y, flr(y / 8) * 8, room.h)
			end

		-- V„Çå„Åürification de la distance par rapport au joueur (lulu)
		local dx = ima_light.x - lulu.x_g
		local dy = ima_light.y - lulu.y_g
		local dist = sqrt(dx * dx + dy * dy)

		if dist > lulu.ima_range then
				-- Limiter la position sur le cercle
				local angle = atan2(dx, dy)
				ima_light.x = lulu.x_g + round((cos(angle) * lulu.ima_range)/8)*8
				ima_light.y = lulu.y_g + round((sin(angle) * lulu.ima_range)/8)*8
		end
	end

	if btnp(‚ùé) and lulu.select and lulu.lights_left > 0 then
		local x = ima_light.x - ima_light.radius
		local y = ima_light.y - ima_light.radius
		create_light(x, y, ima_light.radius)
		sfx(5)
		lulu.lights_left -= 1
	end
end

function update_light_hades()
	-- hades a une variable qui stocke temporairement la light selected
	if #lights > 0 and hades.turnoffs_left > 0 then
		if not hades.using_light then
			sfx(7)
			hades.using_light = true
		end
		local index = hades.light_selected[2]
		local count = #lights
		hades.light_selected[1] = lights[index + 1]
		if (btnp(‚û°Ô∏è)) hades.light_selected[2] = (hades.light_selected[2] + 1) % count
		if (btnp(‚¨ÖÔ∏è)) hades.light_selected[2] = (hades.light_selected[2] - 1) % count
		if btnp(‚ùé) then
			del(lights,hades.light_selected[1])
			hades.light_selected[2] = 0
			hades.turnoffs_left -= 1
			sfx(6)
	end
	else
		--#light = 0 ou hades n'a plus de power
		hades.light_selected[1] = nil
	end
end

function update_black_light()
	local xsign = 0
	local ysign = 0
	local dirpressed = false
	
	if (btn(‚¨ÖÔ∏è)) xsign = -1
	if (btn(‚û°Ô∏è)) xsign = 1
	if (btn(‚¨ÜÔ∏è)) ysign = -1
	if (btn(‚¨áÔ∏è)) ysign = 1
	if ((btn(‚¨ÖÔ∏è)) or (btn(‚û°Ô∏è)) or (btn(‚¨ÜÔ∏è)) or (btn(‚¨áÔ∏è))) dirpressed = true

	if dirpressed then
			local x = ima_light_bo.x + xsign * 8
			local y = ima_light_bo.y + ysign * 8
			
			-- V„Çå„Åürification du d„Çå„Åüplacement normal
			if frames % 3 == 0 then
				ima_light_bo.x = mid(room.x, flr(x / 8) * 8, room.w)
				ima_light_bo.y = mid(room.y, flr(y / 8) * 8, room.h)
			end

		-- V„Çå„Åürification de la distance par rapport au joueur (lulu)
		local dx = ima_light_bo.x - pactual.x_g
		local dy = ima_light_bo.y - pactual.y_g
		local dist = sqrt(dx * dx + dy * dy)

		if dist > pactual.ima_range then
				-- Limiter la position sur le cercle
				local angle = atan2(dx, dy)
				ima_light_bo.x = pactual.x_g + round((cos(angle) * pactual.ima_range)/8)*8
				ima_light_bo.y = pactual.y_g + round((sin(angle) * pactual.ima_range)/8)*8
		end
	end

	if btnp(‚ùé) then
		local x = ima_light_bo.x
		local y = ima_light_bo.y
		create_light(x, y, ima_light_bo.r, "black")
		sfx(10, -2)
		sfx(11)
		pactual.using_black_light = false
	end
end

function draw_light()
	draw_lights()
	draw_imaginary_light()
	draw_hades_turnoff()
end

function draw_imaginary_light()
	if btn(üÖæÔ∏è) and lulu.select and lulu.lights_left > 0 then
		circfill(ima_light.x, ima_light.y, ima_light.radius, ima_light.color)
		circ(lulu.x_g, lulu.y_g, lulu.ima_range, 12) --desinner le circle de ima_light
		-- pset(ima_light.x,ima_light.y,8)
	end
	if pactual.using_black_light then
		circfill(ima_light_bo.x, ima_light_bo.y, ima_light_bo.r, ima_light_bo.c)
		circ(pactual.x_g, pactual.y_g, pactual.ima_range, ima_light_bo.c)
	end
end

function draw_lights()
	foreach(
		lights, function(l)
			-- sspr(12 * 8, 0, l.w, l.h, l.x, l.y, l.radius, l.radius)
			circfill(l.x+l.radius, l.y+l.radius, l.radius,10) 
			circ(l.x+l.radius, l.y+l.radius, l.radius, 6)
		end
	)
	--black lights
	foreach(
		black_lights, function(bl)
			pal(14,3+128,1)
			circfill(bl.x, bl.y, bl.radius, 14)
			circ(bl.x, bl.y, bl.radius, 13)
		end
	)
end

function draw_hades_turnoff()
	if (hades.light_selected[1] != nil) and #lights > 0 then
		--check if selected light already exists
		local i = hades.light_selected[2] + 1
		local x = lights[i].x + lights[i].radius
		local y = lights[i].y+ lights[i].radius
		local r = lights[i].radius
		circfill(x, y, r, 8)
	end
end

function create_light(x, y, r, type, flag, color)
	local new_light = {
		id = #lights,
		x = x,
		y = y,
		radius = r,
		h = 32,
		w = 32,
		flag = flag or 1,
		color = color or 10,
		type = type or "white"
	}

	if (type == "black") then
		new_light.flag = 2
		add(black_lights, new_light)
	else
		add(lights, new_light)
	end
end

-->8
--rooms
function init_room()
	room = {
		id = 0,
		x = 0,
		y = 0,
		w = 128,
		h = 128
	}

	rooms_data = 
	{
		--1
		{
			lights = 
			{
				{x = 17, y = 12, radius = 20},
				{x = 25, y = 12, radius = 20}
			},
			pos = 
			{
				lulu = {x = 19, y = 14},
				hades = {x = 17, y = 7}
			},
			doors = 
			{
				lulu = {x = 30, y = 13},
				hades = {x = 31, y = 10}
			},
			powers = 
			{
				lulu = 1,
				hades = 1
			}
		},
		--2
		{
			lights = 
			{
				{x = 34, y = 9, radius = 24},
				{x = 43, y = 9, radius = 32}
			},
			pos = 
			{
				lulu = {x = 36, y = 11},
				hades = {x = 32, y = 14}
			},
			doors = 
			{
				lulu = {x = 46, y = 13},
				hades = {x = 46, y = 10}
			},
			powers = 
			{
				lulu = 2,
				hades = 2
			}
		},
		--3
		{
			lights = 
			{
				{x = 50, y = 8, radius = 19},
				{x = 56, y = 8, radius = 23}
			},
			pos = 
			{
				lulu = {x = 53, y = 10},
				hades = {x = 62, y = 10}
			},
			doors = 
			{
				lulu = {x = 63, y = 8},
				hades = {x = 48, y = 9}
			},
			powers = 
			{
				lulu = 2,
				hades = 2
			}
		},
		--4
		{
			lights = 
			{
				{x = 65, y = 8, radius = 16},
				{x = 70, y = 0, radius = 24},
				{x = 72, y = 8, radius = 16}
			},
			pos = 
			{
				lulu = {x = 68, y = 10},
				hades = {x = 78, y = 10}
			},
			doors = 
			{
				lulu = {x = 70, y = 1},
				hades = {x = 75, y = 1}
			},
			powers = 
			{
				lulu = 2,
				hades = 1
			}
		},
		--5
		{
			lights = 
			{
				{x = 91, y = 7, radius = 24},
				{x = 83, y = 6, radius = 16}
			},
			pos = 
			{
				lulu = {x = 93, y = 10},
				hades = {x = 82, y = 10}
			},
			doors = 
			{
				lulu = {x = 81, y = 9},
				hades = {x = 94, y = 9}
			},
			powers = 
			{
				lulu = 3,
				hades = 1
			}
		},
		--6
		{
			lights = 
			{
				{x = 102, y = 1, radius = 16},
				{x = 108, y = 5, radius = 24},
				{x = 99, y = 6, radius = 16},
				{x = 104, y = 12, radius = 24},
			},
			pos = 
			{
				lulu = {x = 102, y = 2},
				hades = {x = 104, y = 5}
			},
			doors = 
			{
				lulu = {x = 101, y = 14},
				hades = {x = 106, y = 14}
			},
			powers = 
			{
				lulu = 3,
				hades = 2
			}
		},
		--7
		{
			lights = 
			{
				{x = 113, y = 13, radius = 16},
				{x = 116, y = 13, radius = 16},
				{x = 119, y = 13, radius = 16},
				{x = 122, y = 9, radius = 16},
			},
			pos = 
			{
				lulu = {x = 113, y = 14},
				hades = {x = 113, y = 11}
			},
			doors = 
			{
				lulu = {x = 126, y = 13},
				hades = {x = 126, y = 9}
			},
			powers = 
			{
				lulu = 1,
				hades = 0
			},
			black_orb = 
			{
				{x = 122, y = 14},
			}
		}
	}
end

function update_room()
	--if they have finished the lvl
	if room_transition_pending then
		next_room()
		room_transition_pending = false
		lulu.passed = false
		hades.passed = false
	end
end

function next_room()
	local x = room.x + 128
	--TEST
	-- x = 7 * 128
	local y = room.y
	if (x >= 1024) then
		x = 0
		y = y + 128
		if (y >= 512) then -- We are at the end of the map
		y = 0
		end
	end
	local w = x + 128
	local h = y + 128
	local id = room.id + 1
	if (id == 33) then
		id = 1
	end

	room = new_room(id, x, y, w, h)
	i_room = index_room(room.x, room.y)
	create_room()
	sfx(1)
end

function create_room()
	--delete all lights from ancient room
	for l in all(lights) do
		del(lights,l)
	end
	for bl in all(black_lights) do
		del(black_lights,bl)
	end
	--create lights from new room
	for l in all(rooms_data[i_room].lights) do
		create_light(l.x * 8, l.y * 8, l.radius)
	end
	--characters
	lulu.passed = false
	hades.passed = false
	--doors
	doors.lulu.x = rooms_data[i_room].doors["lulu"].x * 8
	doors.lulu.y = rooms_data[i_room].doors["lulu"].y * 8
	doors.hades.x = rooms_data[i_room].doors["hades"].x * 8
	doors.hades.y = rooms_data[i_room].doors["hades"].y * 8
	--pos
	lulu.x = rooms_data[i_room].pos["lulu"].x * 8
	lulu.y = rooms_data[i_room].pos["lulu"].y * 8
	hades.x = rooms_data[i_room].pos["hades"].x * 8
	hades.y = rooms_data[i_room].pos["hades"].y * 8
	--powers
	lulu.lights_left = rooms_data[i_room].powers["lulu"]
	hades.turnoffs_left = rooms_data[i_room].powers["hades"]
	--black orb
	for bo in all(rooms_data[i_room].black_orb) do
		create_black_orb(bo.x * 8, bo.y * 8)
	end
end

function new_room(id, x, y, w, h)
	return {
		id = id,
		x = x,
		y = y,
		w = w,
		h = h
	}
end

function index_room(x, y)
	return flr(x / 128) + flr(y / 128) * 8
end

function restart_level()
	create_room()
end

function restart_game()
	_init()
end

-->8
--objects

--init objects
function init_objects()
	-- coordonn„Çå„Åües pour lvl 1, a update „Çå„Åç chaque changement de room
	doors = {
		lulu = {
			x = 7 * 8,
			y = 13 * 8
		},
		hades = {
			x = 9 * 8,
			y = 13 * 8
		}
	}
	black_orbs = {}
	ima_light_bo = {
		x = 0,
		y = 0,
		r = 24,
		c = 1
	}
	black_lights = {}
end

function update_objects()
	-- When someone enter its doors, passed will be turn on and character will disappear
	if collision(lulu, doors.lulu) then
		lulu.passed = true
		if not door_sound_played then
			sfx(2)
			door_sound_played = true
		end
	end
	if collision(hades, doors.hades) then
		hades.passed = true
		if not door_sound_played then
			sfx(2)
			door_sound_played = true
		end
	end
	
	-- nouvelle v„Çå„Åürification
	if lulu.passed and hades.passed and not room_transition_pending then
		room_transition_pending = true
		door_sound_played = false
	end
	
end

--animations
function draw_objects()
	--doors
	local flip = frames % 10 >= 5  -- Alterne toutes les 5 frames
	local d_lulu = 35
	local d_hades = 51
	--black orbs
	foreach(
		black_orbs, function(bo)
			spr(bo_spr, bo.x, bo.y, 1, 1, false, false)
			if frames > 20 then
				spr(bo_spr+1, bo.x, bo.y, 1, 1, false, false)
			end
		end
	)

	-- Desspritee la porte dimensionnelle
	spr(d_lulu, doors.lulu.x, doors.lulu.y, 1, 1, flip, false)
	spr(d_lulu, doors.lulu.x, doors.lulu.y + 8, 1, 1, not flip, true)
	spr(d_hades, doors.hades.x, doors.hades.y, 1, 1, flip, false)
	spr(d_hades, doors.hades.x, doors.hades.y + 8, 1, 1, not flip, true)
end

function create_black_orb(x, y)
	add(black_orbs, {x = x, y = y})
end

-->8
--UI
function draw_ui()
	local x = room.x
	local y = room.y
	palt(0, false)
	palt(12, true)
	for i = 1, lulu.lights_left do
		spr(49, x + i * 8, y + 4, 1, 1, false, false)
	end
	for i = 1, hades.turnoffs_left do
		spr(50, x + 120 - i * 8, y + 4, 1, 1, false, false)
	end
	for i = 1, lives do
		--nothing
	end
	palt()
end

-->8
--helper functions

function debug_print()
	-- for bl in all(black_lights) do
	-- 	if collision_black_light(pactual, bl) then
	-- 			print("coll!", pactual.x, pactual.y - 10, 8)
	-- 	end
	-- end
	-- if (collision(lulu,doors.lulu)) print("collides !",10,50,8)
	-- print("room: "..index_room(room.x,room.y),lulu.x,lulu.y-10,8)
	-- print(room.y,45,20,8)
	-- print(room.id,10,40,12)
	-- for l in all(lights) do
	-- 	if collision_light(pactual, l) then	
	-- 		print("col : "..l.id,lulu.x,lulu.y - l.id*10,8)
	-- 	end
	-- end
	-- print("index room: "..i_room,lulu.x,lulu.y-10,8)
	-- print(lulu.in_light,lulu.x,lulu.y-10,8)
	-- print(hades.in_light,hades.x,hades.y-10,8)
	-- print("frames: "..frames,10,10,8)
	-- print("dx: "..lulu.dx,10,20,11)
	-- if (not lulu.in_light) then debug_light = true end
	-- print("out ? "..(debug_light and 'true' or 'false'),lulu.x,lulu.y-20,8)
	-- print("x: "..lulu.x,lulu.x,lulu.y-20,8)
	-- print("y: "..lulu.y,lulu.x,lulu.y-10,8)
	
end

function round(a)
	return flr(a + 0.5)
end

--collisions
function collision(p, o)
	return not (p.x > o.x + 4
				or p.y > o.y + 8
				or p.x + 4 < o.x
				or p.y + 4 < o.y)
end

function collision_light(p, l)
	local px = p.x + p.w / 2
	local py = p.y + p.h / 2
	local lx = l.x + l.radius
	local ly = l.y + l.radius

	local dx = px - lx
	local dy = py - ly
	local dist = sqrt(dx*dx + dy*dy)
	-- print("dist: "..flr(dist), hades.x, hades.y - 10, 7)
	return dist <= l.radius + 2
end

function collision_black_light(p, l)
	local lx = l.x + l.radius / l.radius
	local ly = l.y + l.radius / l.radius
	local rx = max(p.x, min(lx, p.x + p.w))
	local ry = max(p.y, min(ly, p.y + p.h))
	local dx = lx - rx
	local dy = ly - ry
	local dist = sqrt(dx*dx + dy*dy)
	-- print("dist: "..flr(dist), pactual.x, pactual.y - 10, 7)
	-- pset(rx, ry, 11)  -- centre du joueur
	-- pset(lx, ly, 8)   -- centre du cercle
	return dist <= l.radius
end

__gfx__
00000000088888800888888001111110088888800222222002222220c111111c0222222000000000000000000000000000000000000000000000000000000000
00000000888888888888888811111111888888882222222222222222111111112222222200000000000000000000000000000000000000000000000000000000
007007008899999888999998114444418899999822222f2222222f2211111d1122222f2200000000000000000000000000000000000000000000000000000000
00077000899ff9f9899ff9f9144dd4d4899ff9f90229ff920229ff92c113dd310229ff9200000000000000000000000000000000000000000000000000000000
0007700089fc9fc989fc9fc914d14d1489fc9fc9022ffff2022ffff2c11dddd1022ffff200000000000000000000000000000000000000000000000000000000
00700700089fff90089fff90014ddd40089fff900121d1020121d102c01050c10121d10200000000000000000000000000000000000000000000000000000000
000000000088880000888800001111000088880001dddd0010dddd00c05555cc01dddd0000000000000000000000000000000000000000000000000000000000
00000000004004000004500000500500040000400140040010045000c02cc2cc0400004000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000030000000300000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000393000003a30000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000393000003a30000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000030000000300000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
66666666000a000000888000dddddddd088008800000000000045400000000000000000000000000000000000000000000000000000000000000000000000000
6555555600aaa000088a8800dddccddd888888880000000000046400000000000000000000000000000000000000000000000000000000000000000000000000
655555560aa9aa0088a88880ddccccdd888888880808000000045400000000000000000000000000888888880000000000000000000000000000000000000000
65555556aa999aa08a888a80dccccccd888887888888800000046400000000000000000000000000888888880000000000000000000000000000000000000000
655555560aa9aa008888a880dccccccd888877888888800000045400000000000000000000000000848888880000000000000000000000000000000000000000
6555555600aaa000088a8800dccc7ccd088888800888000000046400000000000000000000000000888888880000000000000000000000000000000000000000
65555556000a000000888000dcc77ccd008888000080000000045400000000000000000000000000888888480000000000000000000000000000000000000000
666666660000000000000000dcc77ccd000880000000000000046400000000000000000000000000888888880000000000000000000000000000000000000000
00060000ccc0ccccccc0cccc55555555000000000000000000000000000000000000000000000000888888888808808800000000000000000000000000000000
00006000cc0a0ccccc080ccc55588555000000000000000000000000000000000000000000000000888888888000000800000000000000000000000000000000
00060000c0a9a0ccc08a80cc55888855000000000000000000000000000000000000000000000000888488880000000000000000000000000000000000000000
000060000a999a0c08a8a80c58888885000000000000000000000000000000000000000000000000888888888000000800000000000000000000000000000000
00060000c0a9a0ccc08a80cc58888885000000000000000000000000000000000000000000000000888888888000000800000000000000000000000000000000
00006000cc0a0ccccc080ccc58887885000000000000000000000000000000000000000000000000888888880000000000000000000000000000000000000000
00060000ccc0ccccccc0cccc58877885000000000000000003333330000000000000000000000000888888488000000800000000000000000000000000000000
00006000cccccccccccccccc58877885000000000000000003bbbb30000000000000000000000000888888888808808800000000000000000000000000000000
000000000000000000000000eeeeeeee000000000000000000000000000000000000000000000000000000000000000000000000666666666666666655555555
055555555555555555555550eeeeeeee000000000000000000000000000000000000666666606606666600000000000000000000666565566666666655555555
055555555555555555555550eeeeeeee000000000000000000000000000000000006656566666666656660000000000000000000566555556566566655555555
055555555555555555555550eeeeeeee000000000000000000000000000000000066655556656565555666000000000000000000555555555556556555555555
055555555555555555555550eeeeeeee000000000000000000000000000000000666555555555555555566600000000000000000555555555555555555555555
055555555555555555555550eeeeeeee000000000000000000000000000000000665555555555555555555600000000000000000555555555555555555555555
055555000000000000555550eeeeeeee000000000000000000000000000000000655555555555555555556600000000000000000555555555555555555555555
055555000000000000555550eeeeeeee000000000000000000000000000000000665555555555555555555600000000000000000555555555555555555555555
05555500000000000055555000000000000000000000000000000000000000000665555555555555555566600665556000000000000000000000000000000000
05555500000000000055555000000000000000000000000000000000000000000666555555555555555556600065566000000000000000000000000000000000
05555500000000000055555000000000000000000000000000000000000000000065555555555555555566000665560000000000000000000000000000000000
05555500000000000055555000000000000000000000000000000000000000000665555555555555555566600665566000000000000000000000000000000000
05555500000000000055555000000000000000000000000000000000000000000666555555555555555556600065566000000000000000000000000000000000
05555500000000000055555000000000000000000000000000000000000000000066555555555555555556000665560000000000000000000000000000000000
05555500000000000055555000000000000000000000000000000000000000000665555555555555555566600665566000000000000000000000000000000000
05555500000000000055555000000000000000000000000000000000000000000666555555555555555556600065556000000000000000000000000000000000
05555500000000000055555000000000000000000000000000000000000000000655555555555555555556600000000000000000000000000000000000000000
05555500000000000055555000000000000000000000000000000000000000000665555555555555555555600000000000000000000000000000000000000000
05555555555555555555555000000000000000000000000000000000000000000655555555555555555556600000000000000000000000000000000000000000
05555555555555555555555000000000000000000000000000000000000000000666555555555555555566600000000000000000000000000000000000000000
05555555555555555555555000000000000000000000000000000000000000000066655556565665555666000000000000000000000000000000000000000000
05555555555555555555555000000000000000000000000000000000000000000006665666666666565660000000000000000000000000000000000000000000
05555555555555555555555000000000000000000000000000000000000000000000666660660666666600000000000000000000000000000000000000000000
__gff__
0000000000000000000000000002020200000000000002020000000002020202010000000000000000000200020202020000000000000000000002000202020200000000000000000101010000010101000000000000000001010101000000000000000000000000010101000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
5959595959595959595959595959595920202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020203a3a2020202020203a3a20202020202020202020202020202020202020
5959595920205959595920595959595900202020000052002020000020000000202020202020200020202000202020202020202020202020202020202020202020200030300023000030003320202020200000300000000030000000300000203a3a3a3a202000000000203a3a3a3a20203a202020202020202020203a3a3a20
5959205959205959595920595959595900202020000052002052000020000020202000202020002020202020202020202020202020202020202020202020202020200030300023000030003320202020200000300000000030000000300000203a20202020200000000020203a3a3a3a203a3a20202020202020203a3a3a3a20
5959595959595920595959202059595900002061616152612052202020000020202020202020202020200020000020202020202020202020202020202020202020200030300020000030002020202020200000000000000030000000000000202020000000202020000020202020203a203a3a3a3a20202020203a3a3a3a3a20
59595959595959205920595959595959002000500000520060622020000020202020202020202020202020202020202020202020202020202020202020202020000000203000000000200000002020202000000000000000000000000000002020000000000000200000000000002020203a3a3a3a3a2020203a3a3a3a3a3a20
59595920595959595959595959595959006061616161620000002000000020000020202000200020202000002000202020202020202020202020202020202020000000003000000020000000000020202000000000000000000000000000002020000000000000200000000000000020203a3a3a3a3a3a203a3a3a3a3a3a3a20
59595959596969695959595959595959000000500000000000402000000060616120202000200000202000002020202020202020202020202020202020202020000000003000002000000000000000202000000000000000000000000000002020000000000020202020200000000020203a3a3a3a3a3a3a3a3a3a3a3a3a3a20
595959596a0000005b58595969595959000000500000000000605261616161616120002000000000002000000000202020002000002020202020002020300000000000002000000000000000000000002000000000002020000000000000002020000000200000000000000000000020203a3a3a3a3a3a3a3a20202020202020
6969696a000000005b68696a0068595920202041420000000000520000000000002000000000000000000000000000202000000000303000002000200030002300000000002000000000000000000000202000000020200000000000000000202000000020202020202020200000002020202020202020202020202020202020
00000000000000005b0000000000686920202050520000000000520000000000000000000000000000000000000000203300000000303000000000000020002300000000000020000000000000000000202300000020000000002000000033202000000020000000000020200000002020202020202020202020200000003320
00000000000000005b0000000000000000202050524141414141524141414133000000000000000000000020000033203300000000303000000000000000002000000000000000000000000000000000202300002020000000002020000033202000000000000000000020000000002020000000000000000000000000003320
00000000000000005b0000000000000000002060620000000000520000000033000000000000000000000020000033202020202000202000202020002020202020202020202020202020202020202020202020202000000000000020202020202020200000000000000000000020202020000000000000000000000000002020
00000000000000005b0000000000000000000000000000000000520000002020202020202020202000000020202020202020202000000000202020002020202020202020000000000000000020202020202020202a2a2a2a2a2a2a2a202020202a2a2020200000000000000020202a2a20202020202020202020202000002020
00000000000000235b3300000000000000000000000000000000520000202300000000000000202020002020202023202020202020202020202020202020202020202a2a2a2a2a2a2a2a2a2a2a2a202020203a3a3a3a3a3a3a3a3a3a3a3a20203a3a20202000000000000020203a3a3a20000000000000000000000000002320
00000000000000235b33000000000000000000000000000000005200000023000000000000000000000000000000232020202020202020202020202020202020203a3a3a3a3a3a3a3a3a3a3a3a3a3a20203a3a3a3a3a3a3a3a3a3a3a3a3a3a20203a3a3a20230000000033203a3a3a2020000000000000000000000000002320
4d4e4d4e4d4e4d4e594d4d4e4d4d4e4d2020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020203a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a2020202020202020202020202020202020203a3a2023202a2a2033203a3a202020202020202020202020202020202020
2000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020202000002020200000000000000000000000000000000000000000
2000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
000200000904108031090210c0210e0311203115041190411c04123051270510a0000d0010f00113001170010e0100901005010000102e000240011d00117001120010f0010c0010a00108001060010500105001
000200000c5201052014530195301e53022540265402a54016520185201b5301f5302254026540295402c5202e5201e520215302453026530295302b5302d5302f540315403454037540395403c5503e5503f550
000100000254002540025400454006540095400b5400e5401054012540145401555016550175501755017550165501555013550115500e5500c5400b540095400854007540065400554004540035400254002540
000200000e01009010050100001001000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000400101073610731127311373114731167311773118731187311873117731157311373112731107310f7310d7310d7310d7310d7310f7311073112731137311473116731167311573114731137311173111731
00010000005540055100551005510055100551015510155102551045510555107551085510a5510c5510d5410f541115411354115541185411a5411d5311f5312253125531275312b5312f52133521395213d521
000200003b56436561315512c5512855125551225511f5411d5411a541185411553113531115310f5210d5210c5210a5110951108511065110551104511045110351103511025110251102511015110151101511
00030020017400174101741027410374105741087410b7410e7411075112751137511475115751157511575115751157511475114751137511275111741107410d7410c7410a7410874105741037410174100741
00020000360702d67025060206601c060186501605013650100500f6500d0500b6500904007640050400464003040026300163001630016300161001610016100161000610006100061000610006100061000610
000400003e06338655340552d64028045256532f0452b6432804326033226351e0531b64518043280352563322033206331a0351764316635220331c62516013116130e0130b6150701307015046100101501615
000400200705005051030310102101031000510005100051010310402105031070510a0510d05110031120211503117051180511805117031150211303111051100510e0510d0310b02109031070510605104051
00030000027510275102751027510475105751097510c7510f76114771187711b7711e771207712177121771207711f7711d7711a7711877115761127510f7510d7510b751087510775106751057510475103751
000300200974309743097430974309743097430974309743097430974309743097430974309743097430974309743097430974309743097430974309743097430974309743097430974309743097430974309743
001000200c0431834318343372412464318343372410f2430c04318343372410f3432464318343372410f3430c0433724118343372412464337241183430f3430c04337241183433724124643372410f3431b643
00100020021000200002140020250e11002040020250e1100204002025021100e14002025020100e14002015020400e1200201002045021200e1100204002125020100e14002120020150e04002120021400e015
001a00201a1401d030210401c1301f040230301a1401d0301a1401d030210401c1301f040230301d140210301814021130230401f1301c1401a1301f1401c03021140181302104023130211401f1301c1401d130
011800201c0501d0501e0501f050210502305024050260501c7001f7001f7001c7001c7001a7001f7001a7001a700187001f700187001f7001c7001c7001f7001c700187001c7000070000700007000070000000
010100200905309053090530905309053090530905309053090530905309053090530905309053090530905309053090530905309053090530905309053090530905309053090530905309053090530905309053
012000201a0501a0501a0101a0101d0501d0501d0101d0101c0501c0501c0101c0101f0501f0501f0101f0101a0501a0501a0101a0101d0501d0501d0101d0101c0501c0501c0101c0101f0501f0501f0101f010
001000201a6530000000000000001d6530000000000000001a6531a6531a653000001d6530000000000000001a6531a6531a653000001d6531d65300000000001a6531a6531a653000001d6531d6531d6531d653
001000202615026150261202612029150291502912029120281502815028120281202b1502b1502b1202b1202615026150261202612029150291502912029120281502815028120281202b1502b1502b1202b120
001000001a0501a0501a0501a0501a0501a0501a0501a0501a0501a0501a0501a0501a0501a0501a0501a0501a0501a0501a0501a0501a0501a0501a0501a0501a0501a0501a0501a0501a0001a0001a0001a000
00100000000000000000000000002604026030290402903028040280302b0402b0302604026030290402903028040280302b0402b0302604026030290402903028040280302b0402b03026040260302904029030
011000001a6000000000000000001a6531d6001d653000001a6531d6001d6531a6001a6531d6001d653000001a6531a6001d6531d6531a6531a6001d6531d6001a653000001d6531a6001a6531d6001d65300000
00080020280402804028030280302b0402b0402b0302b0302604026040260302603029040290402903029030280402804028030280302b0402b0402b0302b0302604026040260302603029040290402903029030
001000001a6531d6001d653000001a6531d6001d6531a6001a6531d6001d653000001a6531a6001d6531d6531a6531a6001d6531d6001a653000001d6531d6531d6531d6001d6531d6001d6531d6531d6531d653
001000002d0502d0502d0502d0502d0502d0502d0502d0502d0502d0502d0502d0502d0502d0502d0502d0502d0402d0402d0402d0402d0402d0402d0302d0302d0302d0302d0302d0202d0202d0202d0102d010
011000200c0520000207052000020a0520c052000020c052000020c05207052000020a052000020c052000020c0520000207052000020a0520c0520c0020c0520c0020c05207052000020a052000020c00000002
011000040075300700007530070000700007000070000700007000070000700007000070000700007000070000700007000070000700007000070000700007000070000700007000070000700007000070000700
010800002b0000000029000000002b000000002900000000280000000029000000002800000000260000000028000000002600000000240000000021000000001d000000001d000000001f000000002300000000
001000201d050240502905024050290502905029050240502405027050290500000024050240502405000000000002405029050220501f0502205024050240502405024050270502905027050270502405024050
001000001c0501d0501e0501f0502105023050240501c0001d0001f00021000200001c0001d0001f000200001c0001d0001e0001f000210002300024000000000000000000000000000000000000000000000000
001000201f0401f0201b0401b020160401602014040140201f0401f0201b0401b0201604016020140401402020040200201b0401b0201804018020160401602020040200201b0401b02018040180201604016020
0010000016720167201f7201f7201b7201b720167201672014720147201f7201f7201b7201b7201672016720147201472020720207201b7201b7201872018720167201672020720207201b7201b7201872018720
012000002b1002b1002b1002b1002b1002b1002b1002b1002b1002b1002b1002b1002b1002b1002b1002b1002e1002d1002b100241002d1002a1002d1002e1002a100281002b1002b1002b1002c1002c1002b100
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
01100000000500000000000000000c050000000000000000000500000000000000000c050000000000000000000500000000000000000c050000000000000000000500000000000000000c050000000000000000
01100000020500000000000000000e050000000000000000020500000000000000000e050000000000000000020500000000000000000e0500000000000000000205000000000000000010050000000000000000
012000001c050180001a0001a0501c0001a0001805018000180001a0001a000180001c0001a00018050180001c0001c000180001a0001c0001800018000180001800000000000000000000000000000000000000
012000001c050180001a0001a0501c0001a0001805018000180001a0001a000180001c0001a0001c0501c0001c0001c000180001a0001c0001800018000180001800000000000000000000000000000000000000
011000200c0130c0030c003000530c0330c0030c0030c0030c0130c0030c003000530c0530c0030c0030c0030c0130c00300000000530c033000530c003000000c0530c0030c003000530c0530c0030c00300000
010f00002770027700277002770027700277003070030700307003070030700307002770027700277002770027700307002e7002e7002e7002e7002e7002b7002b7002e7002e7002b7002e7002b7002e70033700
010f00003070030700337003370035700377003770037700377003570033700307003070030700307003370035700377003770035700337003370033700337003770033700307003370037700337000000000000
010f0000030000300003000030000300003000030000500005000050000500005000050000300000000000000000000000030000500005000070000700007000050000300005000070000a000050000700003000
010f00201f0001f0002200024000270002700024000220001f0001f0001f00024000270002700024000220001f0001d0001f000220002700029000240001f0001f0001d000240002b000270001f0002900000000
__music__
01 097e7d7c
03 090b4f7c
01 12137d7c
00 14137d7c
00 154c4e44
00 16177d44
03 1819585a
03 20217d7c
01 3b3c4344
00 37434344
01 37794344
00 383a4344
00 37394344
00 37394344
00 383a4344
02 37394344
01 1b1c4344
03 1b1c4344

